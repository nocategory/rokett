{"initialContent":"import React, { PropTypes } from 'react';\nimport loader from 'monaco-loader';\nconst appRoot = require('app-root-dir').get();\n\nfunction noop() {}\n\nclass MonacoEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.__current_value = props.value;\n  }\n  componentDidMount() {\n    this.afterViewInit();\n  }\n  componentWillUnmount() {\n    this.destroyMonaco();\n  }\n  componentDidUpdate(prevProps) {\n    const context = this.props.context || window;\n    if (this.props.value !== this.__current_value) {\n      // Always refer to the latest value\n      this.__current_value = this.props.value;\n      // Consider the situation of rendering 1+ times before the editor mounted\n      if (this.editor) {\n        this.__prevent_trigger_change_event = true;\n        this.editor.setValue(this.__current_value);\n        this.__prevent_trigger_change_event = false;\n      }\n    }\n    if (prevProps.language !== this.props.language) {\n      context.monaco.editor.setModelLanguage(this.editor.getModel(), this.props.language);\n    }\n  }\n  editorWillMount(monaco) {\n    const { editorWillMount } = this.props;\n    editorWillMount(monaco);\n  }\n  editorDidMount(editor, monaco) {\n    const { editorDidMount, onChange } = this.props;\n    editorDidMount(editor, monaco);\n    editor.onDidChangeModelContent(event => {\n      const value = editor.getValue();\n\n      // Always refer to the latest value\n      this.__current_value = value;\n\n      // Only invoking when user input changed\n      if (!this.__prevent_trigger_change_event) {\n        onChange(value, event);\n      }\n    });\n  }\n  afterViewInit() {\n    if (process.env.NODE_ENV === 'development') {\n      const amdRequire = global.require(`${appRoot}/node_modules/monaco-editor/dev/vs/loader.js`).require;\n      amdRequire.config({\n        baseUrl: `${appRoot}/node_modules/monaco-editor/dev/`\n      });\n      // workaround monaco-css not understanding the environment\n      self.module = undefined;\n      // workaround monaco-typescript not understanding the environment\n      self.process.browser = true;\n      amdRequire(['vs/editor/editor.main'], () => {\n        this.initMonaco();\n      });\n    } else if (process.env.NODE_ENV === 'production') {\n      const amdRequire = global.require(`${__dirname}/dist/monaco-editor/min/vs/loader.js`).require;\n      amdRequire.config({\n        baseUrl: `${__dirname}/dist/monaco-editor/min/`\n      });\n      // workaround monaco-css not understanding the environment\n      self.module = undefined;\n      // workaround monaco-typescript not understanding the environment\n      self.process.browser = true;\n      amdRequire(['vs/editor/editor.main'], () => {\n        this.initMonaco();\n      });\n    }\n  }\n  initMonaco() {\n    const value = this.props.value !== null ? this.props.value : this.props.defaultValue;\n    const { language, theme, options } = this.props;\n    const containerElement = this.refs.container;\n    const context = this.props.context || window;\n    if (typeof context.monaco !== 'undefined') {\n      // Before initializing monaco editor\n      this.editorWillMount(context.monaco);\n      this.editor = context.monaco.editor.create(containerElement, {\n        value,\n        language,\n        theme,\n        ...options,\n      });\n      window.addEventListener('resize', () => {\n        this.editor.layout();\n      });\n      // After initializing monaco editor\n      this.editorDidMount(this.editor, context.monaco);\n    }\n  }\n  destroyMonaco() {\n    if (typeof this.editor !== 'undefined') {\n      this.editor.dispose();\n    }\n  }\n  render() {\n    const { width, height } = this.props;\n    const fixedWidth = width.toString().indexOf('%') !== -1 ? width : `${width}px`;\n    const fixedHeight = height.toString().indexOf('%') !== -1 ? height : `${height}px`;\n    const style = {\n      width: fixedWidth,\n      height: fixedHeight,\n    };\n    return (\n      <div ref=\"container\" style={style} className=\"react-monaco-editor-container\" />\n    );\n  }\n}\n\nMonacoEditor.propTypes = {\n  width: PropTypes.oneOfType([\n    React.PropTypes.string,\n    React.PropTypes.number,\n  ]),\n  height: PropTypes.oneOfType([\n    React.PropTypes.string,\n    React.PropTypes.number,\n  ]),\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  language: PropTypes.string,\n  theme: PropTypes.string,\n  options: PropTypes.object,\n  editorDidMount: PropTypes.func,\n  editorWillMount: PropTypes.func,\n  onChange: PropTypes.func,\n  requireConfig: PropTypes.object,\n};\n\nMonacoEditor.defaultProps = {\n  width: '100%',\n  height: '100%',\n  value: null,\n  defaultValue: '',\n  language: 'javascript',\n  theme: 'vs',\n  options: {},\n  editorDidMount: noop,\n  editorWillMount: noop,\n  onChange: noop,\n  requireConfig: {},\n};\n\nexport default MonacoEditor;\n","currentFilePath":"L:\\Users\\joaoz\\Desktop\\quarkz\\app\\components\\Editor\\index.js","currentFolderPath":"L:\\Users\\joaoz\\Desktop\\quarkz\\app\\components\\Editor","editorLang":"javascript","currentContent":"import React, { PropTypes } from 'react';\nimport loader from 'monaco-loader';\nconst appRoot = require('app-root-dir').get();\n\nfunction noop() {}\n\nclass MonacoEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.__current_value = props.value;\n  }\n  componentDidMount() {\n    this.afterViewInit();\n  }\n  componentWillUnmount() {\n    this.destroyMonaco();\n  }\n  componentDidUpdate(prevProps) {\n    const context = this.props.context || window;\n    if (this.props.value !== this.__current_value) {\n      // Always refer to the latest value\n      this.__current_value = this.props.value;\n      // Consider the situation of rendering 1+ times before the editor mounted\n      if (this.editor) {\n        this.__prevent_trigger_change_event = true;\n        this.editor.setValue(this.__current_value);\n        this.__prevent_trigger_change_event = false;\n      }\n    }\n    if (prevProps.language !== this.props.language) {\n      context.monaco.editor.setModelLanguage(this.editor.getModel(), this.props.language);\n    }\n  }\n  editorWillMount(monaco) {\n    const { editorWillMount } = this.props;\n    editorWillMount(monaco);\n  }\n  editorDidMount(editor, monaco) {\n    const { editorDidMount, onChange } = this.props;\n    editorDidMount(editor, monaco);\n    editor.onDidChangeModelContent(event => {\n      const value = editor.getValue();\n\n      // Always refer to the latest value\n      this.__current_value = value;\n\n      // Only invoking when user input changed\n      if (!this.__prevent_trigger_change_event) {\n        onChange(value, event);\n      }\n    });\n  }\n  afterViewInit() {\n    if (process.env.NODE_ENV === 'development') {\n      const amdRequire = global.require(`${appRoot}/node_modules/monaco-editor/dev/vs/loader.js`).require;\n      amdRequire.config({\n        baseUrl: `${appRoot}/node_modules/monaco-editor/dev/`\n      });\n      // workaround monaco-css not understanding the environment\n      self.module = undefined;\n      // workaround monaco-typescript not understanding the environment\n      self.process.browser = true;\n      amdRequire(['vs/editor/editor.main'], () => {\n        this.initMonaco();\n      });\n    } else if (process.env.NODE_ENV === 'production') {\n      const amdRequire = global.require(`${__dirname}/dist/monaco-editor/min/vs/loader.js`).require;\n      amdRequire.config({\n        baseUrl: `${__dirname}/dist/monaco-editor/min/`\n      });\n      // workaround monaco-css not understanding the environment\n      self.module = undefined;\n      // workaround monaco-typescript not understanding the environment\n      self.process.browser = true;\n      amdRequire(['vs/editor/editor.main'], () => {\n        this.initMonaco();\n      });\n    }\n  }\n  initMonaco() {\n    const value = this.props.value !== null ? this.props.value : this.props.defaultValue;\n    const { language, theme, options } = this.props;\n    const containerElement = this.refs.container;\n    const context = this.props.context || window;\n    if (typeof context.monaco !== 'undefined') {\n      // Before initializing monaco editor\n      this.editorWillMount(context.monaco);\n      this.editor = context.monaco.editor.create(containerElement, {\n        value,\n        language,\n        theme,\n        ...options,\n      });\n      window.addEventListener('resize', () => {\n        this.editor.layout();\n      });\n      // After initializing monaco editor\n      this.editorDidMount(this.editor, context.monaco);\n    }\n  }\n  destroyMonaco() {\n    if (typeof this.editor !== 'undefined') {\n      this.editor.dispose();\n    }\n  }\n  render() {\n    const { width, height } = this.props;\n    const fixedWidth = width.toString().indexOf('%') !== -1 ? width : `${width}px`;\n    const fixedHeight = height.toString().indexOf('%') !== -1 ? height : `${height}px`;\n    const style = {\n      width: fixedWidth,\n      height: fixedHeight,\n    };\n    return (\n      <div ref=\"container\" style={style} className=\"react-monaco-editor-container\" />\n    );\n  }\n}\n\nMonacoEditor.propTypes = {\n  width: PropTypes.oneOfType([\n    React.PropTypes.string,\n    React.PropTypes.number,\n  ]),\n  height: PropTypes.oneOfType([\n    React.PropTypes.string,\n    React.PropTypes.number,\n  ]),\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  language: PropTypes.string,\n  theme: PropTypes.string,\n  options: PropTypes.object,\n  editorDidMount: PropTypes.func,\n  editorWillMount: PropTypes.func,\n  onChange: PropTypes.func,\n  requireConfig: PropTypes.object,\n};\n\nMonacoEditor.defaultProps = {\n  width: '100%',\n  height: '100%',\n  value: null,\n  defaultValue: '',\n  language: 'javascript',\n  theme: 'vs',\n  options: {},\n  editorDidMount: noop,\n  editorWillMount: noop,\n  onChange: noop,\n  requireConfig: {},\n};\n\nexport default MonacoEditor;\n","saved":true,"editorIsMounted":false,"languages":[{"id":"plaintext","extensions":[".txt",".gitignore"],"aliases":["Plain Text","text"],"mimetypes":["text/plain"]},{"id":"typescript","extensions":[".ts",".tsx"],"aliases":["TypeScript","ts","typescript"],"mimetypes":["text/typescript"]},{"id":"javascript","extensions":[".js",".es6",".jsx"],"firstLine":"^#!.*\\bnode","filenames":["jakefile"],"aliases":["JavaScript","javascript","js"],"mimetypes":["text/javascript"]},{"id":"json","extensions":[".json",".bowerrc",".jshintrc",".jscsrc",".eslintrc",".babelrc"],"aliases":["JSON","json"],"mimetypes":["application/json"]},{"id":"bat","extensions":[".bat",".cmd"],"aliases":["Batch","bat"],"module":"./bat"},{"id":"coffeescript","extensions":[".coffee"],"aliases":["CoffeeScript","coffeescript","coffee"],"mimetypes":["text/x-coffeescript","text/coffeescript"],"module":"./coffee"},{"id":"c","extensions":[".c",".h"],"aliases":["C","c"],"module":"./cpp"},{"id":"cpp","extensions":[".cpp",".cc",".cxx",".hpp",".hh",".hxx"],"aliases":["C++","Cpp","cpp"],"module":"./cpp"},{"id":"csharp","extensions":[".cs",".csx"],"aliases":["C#","csharp"],"module":"./csharp"},{"id":"dockerfile","extensions":[".dockerfile"],"filenames":["Dockerfile"],"aliases":["Dockerfile"],"module":"./dockerfile"},{"id":"fsharp","extensions":[".fs",".fsi",".ml",".mli",".fsx",".fsscript"],"aliases":["F#","FSharp","fsharp"],"module":"./fsharp"},{"id":"go","extensions":[".go"],"aliases":["Go"],"module":"./go"},{"id":"handlebars","extensions":[".handlebars",".hbs"],"aliases":["Handlebars","handlebars"],"mimetypes":["text/x-handlebars-template"],"module":"./handlebars"},{"id":"html","extensions":[".html",".htm",".shtml",".xhtml",".mdoc",".jsp",".asp",".aspx",".jshtm"],"aliases":["HTML","htm","html","xhtml"],"mimetypes":["text/html","text/x-jshtm","text/template","text/ng-template"],"module":"./html"},{"id":"ini","extensions":[".ini",".properties",".gitconfig"],"filenames":["config",".gitattributes",".gitconfig",".editorconfig"],"aliases":["Ini","ini"],"module":"./ini"},{"id":"jade","extensions":[".jade",".pug"],"aliases":["Jade","jade"],"module":"./jade"},{"id":"java","extensions":[".java",".jav"],"aliases":["Java","java"],"mimetypes":["text/x-java-source","text/x-java"],"module":"./java"},{"id":"lua","extensions":[".lua"],"aliases":["Lua","lua"],"module":"./lua"},{"id":"markdown","extensions":[".md",".markdown",".mdown",".mkdn",".mkd",".mdwn",".mdtxt",".mdtext"],"aliases":["Markdown","markdown"],"module":"./markdown"},{"id":"objective-c","extensions":[".m"],"aliases":["Objective-C"],"module":"./objective-c"},{"id":"postiats","extensions":[".dats",".sats",".hats"],"aliases":["ATS","ATS/Postiats"],"module":"./postiats"},{"id":"php","extensions":[".php",".php4",".php5",".phtml",".ctp"],"aliases":["PHP","php"],"mimetypes":["application/x-php"],"module":"./php"},{"id":"powershell","extensions":[".ps1",".psm1",".psd1"],"aliases":["PowerShell","powershell","ps","ps1"],"module":"./powershell"},{"id":"python","extensions":[".py",".rpy",".pyw",".cpy",".gyp",".gypi"],"aliases":["Python","py"],"firstLine":"^#!/.*\\bpython[0-9.-]*\\b","module":"./python"},{"id":"r","extensions":[".r",".rhistory",".rprofile",".rt"],"aliases":["R","r"],"module":"./r"},{"id":"razor","extensions":[".cshtml"],"aliases":["Razor","razor"],"mimetypes":["text/x-cshtml"],"module":"./razor"},{"id":"ruby","extensions":[".rb",".rbx",".rjs",".gemspec",".pp"],"filenames":["rakefile"],"aliases":["Ruby","rb"],"module":"./ruby"},{"id":"swift","aliases":["Swift","swift"],"extensions":[".swift"],"mimetypes":["text/swift"],"module":"./swift"},{"id":"sql","extensions":[".sql"],"aliases":["SQL"],"module":"./sql"},{"id":"vb","extensions":[".vb"],"aliases":["Visual Basic","vb"],"module":"./vb"},{"id":"xml","extensions":[".xml",".dtd",".ascx",".csproj",".config",".wxi",".wxl",".wxs",".xaml",".svg",".svgz"],"firstLine":"(\\<\\?xml.*)|(\\<svg)|(\\<\\!doctype\\s+svg)","aliases":["XML","xml"],"mimetypes":["text/xml","application/xml","application/xaml+xml","application/xml-dtd"],"module":"./xml"},{"id":"less","extensions":[".less"],"aliases":["Less","less"],"mimetypes":["text/x-less","text/less"],"module":"./less"},{"id":"scss","extensions":[".scss"],"aliases":["Sass","sass","scss"],"mimetypes":["text/x-scss","text/scss"],"module":"./scss"},{"id":"css","extensions":[".css"],"aliases":["CSS","css"],"mimetypes":["text/css"],"module":"./css"},{"id":"yaml","extensions":[".yaml",".yml"],"aliases":["YAML","yaml","YML","yml"],"mimetypes":["application/x-yaml"],"module":"./yaml"}]}